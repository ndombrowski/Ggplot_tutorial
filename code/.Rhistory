head(gapminder)
install.packages("gapminder")
library(gapminder)
library()
head(gapminder)
#load data
library("gapminder")
#subset the data
data_2007 <- gapminder |>
filter(year == 2007)
#load data
library("gapminder")
#subset the data
data_2007 <- gapminder |>
filter(year == 2007)
#load data
library("gapminder")
#subset the data
data_2007 <- gapminder |>
filter(year == 2007)
#load data
library(gapminder)
#subset the data
data_2007 <- gapminder |>
filter(year == 2007)
head(gapminder)
str(gapminder)
tail(gapminder)
#subset the data
data_2007 <- gapminder |>
filter(year == 2007)
#check the data
str(data_2007)
#check the data
str(data_2007)
#check the data
str(gapminder)
#subset the data
data_2007 <- gapminder |>
filter(year == 2007)
#subset the data
data_2007 <- gapminder %>%
filter(year == 2007)
#subset the data
data_2007 <- gapminder |>
filter(year == 2007)
#check the data
str(gapminder)
#subset the data
data_2007 <- gapminder |>
filter(country == "Afghanistan")
gapminder$year
#load data
library(gapminder)
#subset the data
data_2007 <- gapminder |>
filter(country == "Afghanistan")
#subset the data
data_2007 <- gapminder |>
filter(year == 2007)
?filter
filter(gapminder$year, 2007)
library(palmerpenguins)
penguins_2017 <-
penguins |>
filter(year == 2007)
#load packages
library(tidyverse)      #tools for transforming data
library(palmerpenguins)
#| eval: true
#| warning: false
#load packages
library(palmerpenguins)  #contains our dataset
library(tidyverse)      #tools for transforming and visualizing data
#| eval: true
#look at the first rows of the penguins dataset
head(penguins)
#only print data of penguins if the year is (==, a conditional operator) 2007
penguins |>
filter(year == 2007)
#load data
library(gapminder)
library(tidyverse)
#subset the data
data_2007 <- gapminder$ |>
#load data
library(gapminder)
library(tidyverse)
#subset the data
data_2007 <- gapminder |>
filter(year == 2007)
#check the data
str(data_2007)
#load packages
library(tidyverse)      #tools for transforming data
library(palmerpenguins)
#| eval: false
install.packages("palmerpenguins")
#load packages
library(tidyverse)      #tools for transforming data
library(palmerpenguins)
#get a first look at the penguin dataset
head(penguins)
#| eval: true
#| warning: false
#load packages
library(palmerpenguins)  #contains our dataset
library(tidyverse)      #tools for transforming and visualizing data
penguins |>
filter(flipper_length_mm >= 200)
penguins |>
filter(flipper_length_mm >= 200) |>
len()
penguins |>
filter(flipper_length_mm >= 200) |>
nrow()
#we work with 104 rows of data
penguins |>
filter(year != 2008, island == "Biscoe")
head(penguins)
#select everything if it ends with mm OR g
penguins |>
select(contains("species") | contains("species"))
penguins |>
select(contains("length") | contains("species"))
penguins %>%
mutate(bill_length_cm = bill_length_mm / 10)
penguins |>
count(species, island)
penguins %>%
mutate(body_mass_kg = body_mass_g / 1000) |>
filter(species == "Gentoo", year == 2007) |>
arrange(desc(body_mass_kg))
penguins %>%
mutate(body_mass_kg = body_mass_g / 1000) |>
filter(species == "Gentoo", year == 2007) |>
arrange(desc(body_mass_kg)) |>
select(body_mass_kg) |>
head(1)
penguins %>%
mutate(body_mass_kg = body_mass_g / 1000) |>
filter(species == "Gentoo", year == 2007) |>
arrange(desc(body_mass_kg)) |>
select(island, body_mass_kg) |>
head(1)
penguins %>%
mutate(body_mass_kg = body_mass_g / 1000) |>
filter(species == "Gentoo", year == 2007) |>
arrange(desc(body_mass_kg)) |>
select(island, body_mass_kg) |>
head(1)
penguins |>
drop_na() |>
group_by(sex)  |>
summarize(mean_bill = mean(bill_length_mm),
median_bill = median(bill_length_mm),
sd_bill = sd(bill_length_mm))
penguins |>
group_by(species)  |>
summarize(avg_weight = mean(body_mass_g, na.rm = TRUE), n = sum(!is.na(body_mass_g)))
penguins |>
group_by(species)  |>
summarize(avg_weight = mean(body_mass_g, na.rm = TRUE), n = sum((body_mass_g, na.rm = TRUE)))
penguins |>
group_by(species)  |>
summarize(avg_weight = mean(body_mass_g, na.rm = TRUE), n = sum(body_mass_g, na.rm = TRUE))
penguins |>
group_by(species)  |>
summarize(avg_weight = mean(body_mass_g, na.rm = TRUE), n = sum(body_mass_g))
penguins |>
group_by(species)  |>
summarize(avg_weight = mean(body_mass_g, na.rm = TRUE), n = n(body_mass_g))
penguins |>
group_by(species)  |>
summarize(avg_weight = mean(body_mass_g, na.rm = TRUE), n = n())
penguins |>
group_by(species)  |>
summarize(avg_weight = mean(body_mass_g, na.rm = TRUE), n = n(na.rm = TRUE))
penguins |>
group_by(species)  |>
summarize(avg_weight = mean(body_mass_g, na.rm = TRUE), n = sum(!is.na(body_mass_g)))
!is.na(penguins$body_mass_g)
penguins |>
drop_na() |>
group_by(species)  |>
summarize(avg_weight = mean(body_mass_g), n = n())
penguins |>
group_by(species)  |>
summarize(avg_weight = mean(body_mass_g, na.rm = TRUE), n = sum(!is.na(body_mass_g)))
?facet_grid()
ggplot(penguins_clean, aes(bill_length_mm)) +
geom_histogram() +
facet_grid(species ~ .)
#discard rows with NAs
penguins_clean <-
penguins |>
drop_na()
#sanity check to control whether 11 rows were dropped
#print the dimensions for our original dataset
print(dim(penguins))
#print the dimensions for our cleaned dataset
print(dim(penguins_clean))
ggplot(penguins_clean, aes(bill_length_mm)) +
geom_histogram() +
facet_grid(species ~ .)
ggplot(penguins_clean, aes(bill_length_mm)) +
geom_histogram() +
facet_grid(rows = species)
ggplot(penguins_clean, aes(bill_length_mm)) +
geom_histogram() +
facet_grid(rows = vars(species))
ggplot(penguins_clean, aes(bill_length_mm)) +
geom_histogram() +
facet_grid(cols = vars(species))
ggplot(penguins_clean, aes(bill_length_mm)) +
geom_histogram() +
facet_grid(species ~ year)
ggplot(penguins_clean, aes(bill_length_mm)) +
geom_histogram() +
facet_grid(cols = vars(year), rows = vars(species))
ggplot(penguins_clean, aes(bill_length_mm)) +
geom_histogram() +
facet_grid(cols = vars(species, year))
ggplot(penguins_clean, aes(bill_length_mm)) +
geom_histogram() +
facet_grid(rows = vars(species, year))
ggplot(penguins_clean, aes(bill_length_mm)) +
geom_histogram() +
facet_grid( . ~ species))
ggplot(penguins_clean, aes(bill_length_mm)) +
geom_histogram() +
facet_grid( . ~ species)
ggplot(penguins_clean, aes(bill_length_mm)) +
geom_histogram() +
facet_grid(species ~ .)
ggplot(penguins_clean, aes(bill_length_mm)) +
geom_histogram() +
facet_grid(cols = vars(species))
ggplot(penguins_clean, aes(bill_length_mm)) +
geom_histogram() +
facet_grid(cols = vars(year), rows = vars(species), scales = "free")
#duplicate our dataframe but remove the column we want to use to facet
#this way facet_grid won't separate the points by species for this dataframe
df2 <- penguins_clean |>
select(-species)
ggplot(penguins_clean, aes(x =bill_length_mm, y = body_mass_g )) +
#add all datapoints to the facets by using our second dataframe
geom_point(data = df2, color = "grey", alpha = 0.5) +
#assign the species to the color aesthetic
geom_point(aes(color = species)) +
#facet the data
facet_grid(cols = var(species))
#duplicate our dataframe but remove the column we want to use to facet
#this way facet_grid won't separate the points by species for this dataframe
df2 <- penguins_clean |>
select(-species)
ggplot(penguins_clean, aes(x =bill_length_mm, y = body_mass_g )) +
#add all datapoints to the facets by using our second dataframe
geom_point(data = df2, color = "grey", alpha = 0.5) +
#assign the species to the color aesthetic
geom_point(aes(color = species)) +
#facet the data
facet_grid(cols = vars(species))
#question 1
ggplot(penguins_clean, aes(x =bill_length_mm, y = body_mass_g )) +
geom_point() +
geom_smooth(method = "lm", color = "grey") +
facet_grid(. ~ species)
#question 1
ggplot(penguins_clean, aes(x =bill_length_mm, y = body_mass_g )) +
geom_point() +
geom_smooth(method = "lm", color = "grey") +
facet_grid(cols = vars(species))
#question 2
ggplot(penguins_clean, aes(x =bill_length_mm, y = body_mass_g )) +
geom_point() +
geom_smooth(method = "lm", color = "grey") +
facet_grid(cols = vars(species), scales = "free")
#question3
ggplot(penguins_clean, aes(body_mass_g)) +
geom_histogram() +
facet_grid(species ~ island)
#question3
ggplot(penguins_clean, aes(body_mass_g)) +
geom_histogram() +
facet_grid(cols = vars(species), rows = vars(island))
#question4
ggplot(penguins_clean, aes(body_mass_g)) +
geom_histogram() +
facet_wrap(cols = vars(species), rows = vars(island))
#question4
ggplot(penguins_clean, aes(body_mass_g)) +
geom_histogram() +
facet_wrap(cols = vars(species), rows = vars(island))
?facet+wrap
?facet_wrap
#question4
ggplot(penguins_clean, aes(body_mass_g)) +
geom_histogram() +
facet_wrap(ncol = vars(species), nrow = vars(island))
#question4
ggplot(penguins_clean, aes(body_mass_g)) +
geom_histogram() +
facet_wrap(ncol = vars(species), nrow = vars(island))
#question4
ggplot(penguins_clean, aes(body_mass_g)) +
geom_histogram() +
facet_wrap(ncol = vars(species), nrow = vars(island))
#question4
ggplot(penguins_clean, aes(body_mass_g)) +
geom_histogram() +
facet_wrap(vars(species, island)))
#question4
ggplot(penguins_clean, aes(body_mass_g)) +
geom_histogram() +
facet_wrap(vars(species, island))
ggplot(penguins_clean, aes(bill_length_mm)) +
geom_histogram() +
facet_grid(vars(year, species))
ggplot(penguins_clean, aes(bill_length_mm)) +
geom_histogram() +
facet_grid(vars(year), vars(species))
?facet_grid
ggplot(penguins_clean, aes(bill_length_mm)) +
geom_histogram() +
facet_grid(vars(year), vars(species))
ggplot(penguins_clean, aes(bill_length_mm)) +
geom_histogram() +
facet_grid(rows = vars(species), cols = vars(year))
#load packages
library(tidyverse)      #tools for transforming data
library(palmerpenguins)
#discard rows with NAs
penguins_clean <-
penguins |>
drop_na()
#sanity check to control whether 11 rows were dropped
#print the dimensions for our original dataset
print(dim(penguins))
#print the dimensions for our cleaned dataset
print(dim(penguins_clean))
#load some libraries
library(modelbased)
#create linear model and predict data
mod <- lm(flipper_length_mm ~ body_mass_g , data = penguins_clean)
pred_data <- estimate_expectation(mod)
head(pred_data)
ggplot(penguins_clean, aes(flipper_length_mm, body_mass_g)) +
geom_point() +
geom_line(aes(y = pred_data$Predicted), size = 1)
ggplot(penguins_clean, aes(flipper_length_mm, body_mass_g)) +
geom_point() +
geom_line(aes(y = pred_data$Predicted), size = 1)
#create a dataframe of 200 body mass values
grid <- data_frame(body_mass_g = seq(min(penguins_clean$body_mass_g), max(penguins_clean$body_mass_g), length = 200))
#create a dataframe of 200 body mass values
grid <- tibble(body_mass_g = seq(min(penguins_clean$body_mass_g), max(penguins_clean$body_mass_g), length = 200))
#predict the flipper length based on our model and our dataframe
grid$flipper_length_mm <- predict(mod, newdata = grid)
ggplot(penguins_clean, aes(flipper_length_mm, body_mass_g)) +
geom_point() +
geom_line(data = grid)
ggplot(penguins_clean, aes(flipper_length_mm, body_mass_g)) +
geom_point() +
geom_line(data = mod)
head(pred_data)
#create linear model and predict data
mod <- lm(flipper_length_mm ~ body_mass_g , data = penguins_clean)
pred_data <- estimate_expectation(mod)
pred_data$flipper_length_mm <- penguins_clean$flipper_length_mm
head(pred_data)
ggplot(penguins_clean, aes(flipper_length_mm, body_mass_g)) +
geom_point() +
geom_line(data = mod)
ggplot(penguins_clean, aes(flipper_length_mm, body_mass_g)) +
geom_point() +
geom_line(data = mod, aes(x = flipper_length_mm, y = body_mass_g))
ggplot(penguins_clean, aes(flipper_length_mm, body_mass_g)) +
geom_point() +
geom_line(data = mod, aes(x = flipper_length_mm, y = Predicted ))
#load some libraries
library(modelbased)
#create linear model and predict data
mod <- lm(flipper_length_mm ~ body_mass_g , data = penguins_clean)
pred_data <- estimate_expectation(mod)
pred_data$flipper_length_mm <- penguins_clean$flipper_length_mm
head(pred_data)
#create a dataframe of 200 body mass values
grid <- tibble(body_mass_g = seq(min(penguins_clean$body_mass_g), max(penguins_clean$body_mass_g), length = 200))
#predict the flipper length based on our model and our dataframe
grid$flipper_length_mm <- predict(mod, newdata = grid)
ggplot(penguins_clean, aes(flipper_length_mm, body_mass_g)) +
geom_point() +
geom_line(data = pred_data, aes(x = flipper_length_mm, y = Predicted ))
head(pred_data)
View(pred_data)
ggplot(penguins_clean, aes(flipper_length_mm, body_mass_g)) +
geom_point() +
geom_line(data = pred_data)
ggplot(penguins_clean, aes(flipper_length_mm, body_mass_g)) +
geom_point() +
geom_line(data = pred_data, aes(x = body_mass_g , y = Predicted ))
ggplot(penguins_clean, aes(flipper_length_mm, body_mass_g)) +
geom_point()
ggplot(penguins_clean, aes(x = flipper_length_mm, y=  body_mass_g)) +
geom_point() +
geom_line(data = pred_data, aes(x = flipper_length_mm, y = Predicted ))
ggplot(penguins_clean, aes(x = flipper_length_mm, y=  body_mass_g)) +
geom_point() +
geom_line(data = pred_data, aes(x = Predicted, y = body_mass_g ))
View(pred_data)
library(tidyverse)
library(palmerpenguins)
#discard rows with NAs
penguins_clean <-
penguins |>
drop_na()
penguins |>
arrange(desc(body_mass_g))
penguins |>
filter(year == 2007) |>
select(species, island, bill_length_mm) |>
arrange(desc(bill_length_mm)) |>
head(3)
head(penguins_clean)
ggplot(penguins_clean, aes(x = bill_length_mm, y = bill_depth_mm )) +
geom_point()
#| eval: false
pdf(file = "image1.pdf")
ggplot(penguins_clean, aes(x = bill_length_mm, y = bill_depth_mm )) +
geom_point()
dev.off()
#| eval: false
ggplot(penguins_clean, aes(x = bill_length_mm, y = bill_depth_mm )) +
geom_point()
ggsave("image2.pdf")
?pdf
?ggsave
